=================================== FAILURES ===================================
______________ test_override_simple[/main-depends/-200-expected0] ______________

url = '/main-depends/', status_code = 200
expected = {'in': 'main-depends', 'params': {'limit': 10, 'q': None, 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
>       assert response.status_code == status_code
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:266: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
___________ test_override_simple[/main-depends/?q=foo-200-expected1] ___________

url = '/main-depends/?q=foo', status_code = 200
expected = {'in': 'main-depends', 'params': {'limit': 10, 'q': 'foo', 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
        assert response.status_code == status_code
>       assert response.json() == expected
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:267: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_ test_override_simple[/main-depends/?q=foo&skip=100&limit=200-200-expected2] __

url = '/main-depends/?q=foo&skip=100&limit=200', status_code = 200
expected = {'in': 'main-depends', 'params': {'limit': 10, 'q': 'foo', 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
        assert response.status_code == status_code
>       assert response.json() == expected
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:267: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
___________ test_override_simple[/decorator-depends/-200-expected3] ____________

url = '/decorator-depends/', status_code = 200
expected = {'in': 'decorator-depends'}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
>       assert response.status_code == status_code
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:266: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_____________ test_override_simple[/router-depends/-200-expected4] _____________

url = '/router-depends/', status_code = 200
expected = {'in': 'router-depends', 'params': {'limit': 10, 'q': None, 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
>       assert response.status_code == status_code
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:266: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
__________ test_override_simple[/router-depends/?q=foo-200-expected5] __________

url = '/router-depends/?q=foo', status_code = 200
expected = {'in': 'router-depends', 'params': {'limit': 10, 'q': 'foo', 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
        assert response.status_code == status_code
>       assert response.json() == expected
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:267: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_ test_override_simple[/router-depends/?q=foo&skip=100&limit=200-200-expected6] _

url = '/router-depends/?q=foo&skip=100&limit=200', status_code = 200
expected = {'in': 'router-depends', 'params': {'limit': 10, 'q': 'foo', 'skip': 5}}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
        assert response.status_code == status_code
>       assert response.json() == expected
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:267: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
________ test_override_simple[/router-decorator-depends/-200-expected7] ________

url = '/router-decorator-depends/', status_code = 200
expected = {'in': 'router-decorator-depends'}

    @pytest.mark.parametrize(
        "url,status_code,expected",
        [
            (
                "/main-depends/",
                200,
                {"in": "main-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/main-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "main-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/decorator-depends/", 200, {"in": "decorator-depends"}),
            (
                "/router-depends/",
                200,
                {"in": "router-depends", "params": {"q": None, "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            (
                "/router-depends/?q=foo&skip=100&limit=200",
                200,
                {"in": "router-depends", "params": {"q": "foo", "skip": 5, "limit": 10}},
            ),
            ("/router-decorator-depends/", 200, {"in": "router-decorator-depends"}),
        ],
    )
    def test_override_simple(url, status_code, expected):
        app.dependency_overrides[common_parameters] = overrider_dependency_simple
        response = client.get(url)
>       assert response.status_code == status_code
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:266: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_simple
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_____________________ test_override_with_sub_main_depends ______________________

    def test_override_with_sub_main_depends():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/main-depends/")
        assert response.status_code == 422
>       assert response.json() == IsDict(
            {
                "detail": [
                    {
                        "type": "missing",
                        "loc": ["query", "k"],
                        "msg": "Field required",
                        "input": None,
                    }
                ]
            }
        ) | IsDict(
            # TODO: remove when deprecating Pydantic v1
            {
                "detail": [
                    {
                        "loc": ["query", "k"],
                        "msg": "field required",
                        "type": "value_error.missing",
                    }
                ]
            }
        )
E       AssertionError

tests/test_dependency_overrides.py:275: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_main_depends
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
__________________ test_override_with_sub__main_depends_q_foo __________________

    def test_override_with_sub__main_depends_q_foo():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/main-depends/?q=foo")
>       assert response.status_code == 422
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:304: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub__main_depends_q_foo
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
__________________ test_override_with_sub_main_depends_k_bar ___________________

    def test_override_with_sub_main_depends_k_bar():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/main-depends/?k=bar")
>       assert response.status_code == 200
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:334: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_main_depends_k_bar
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
___________________ test_override_with_sub_decorator_depends ___________________

    def test_override_with_sub_decorator_depends():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/decorator-depends/")
        assert response.status_code == 422
>       assert response.json() == IsDict(
            {
                "detail": [
                    {
                        "type": "missing",
                        "loc": ["query", "k"],
                        "msg": "Field required",
                        "input": None,
                    }
                ]
            }
        ) | IsDict(
            # TODO: remove when deprecating Pydantic v1
            {
                "detail": [
                    {
                        "loc": ["query", "k"],
                        "msg": "field required",
                        "type": "value_error.missing",
                    }
                ]
            }
        )
E       AssertionError

tests/test_dependency_overrides.py:343: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_decorator_depends
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
________________ test_override_with_sub_decorator_depends_q_foo ________________

    def test_override_with_sub_decorator_depends_q_foo():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/decorator-depends/?q=foo")
>       assert response.status_code == 422
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:372: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_decorator_depends_q_foo
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
________________ test_override_with_sub_decorator_depends_k_bar ________________

    def test_override_with_sub_decorator_depends_k_bar():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/decorator-depends/?k=bar")
>       assert response.status_code == 200
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:402: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_decorator_depends_k_bar
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
____________________ test_override_with_sub_router_depends _____________________

    def test_override_with_sub_router_depends():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-depends/")
        assert response.status_code == 422
>       assert response.json() == IsDict(
            {
                "detail": [
                    {
                        "type": "missing",
                        "loc": ["query", "k"],
                        "msg": "Field required",
                        "input": None,
                    }
                ]
            }
        ) | IsDict(
            # TODO remove when deprecating Pydantic v1
            {
                "detail": [
                    {
                        "loc": ["query", "k"],
                        "msg": "field required",
                        "type": "value_error.missing",
                    }
                ]
            }
        )
E       AssertionError

tests/test_dependency_overrides.py:411: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_depends
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_________________ test_override_with_sub_router_depends_q_foo __________________

    def test_override_with_sub_router_depends_q_foo():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-depends/?q=foo")
>       assert response.status_code == 422
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:440: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_depends_q_foo
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_________________ test_override_with_sub_router_depends_k_bar __________________

    def test_override_with_sub_router_depends_k_bar():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-depends/?k=bar")
>       assert response.status_code == 200
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:470: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_depends_k_bar
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
_______________ test_override_with_sub_router_decorator_depends ________________

    def test_override_with_sub_router_decorator_depends():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-decorator-depends/")
        assert response.status_code == 422
>       assert response.json() == IsDict(
            {
                "detail": [
                    {
                        "type": "missing",
                        "loc": ["query", "k"],
                        "msg": "Field required",
                        "input": None,
                    }
                ]
            }
        ) | IsDict(
            # TODO remove when deprecating Pydantic v1
            {
                "detail": [
                    {
                        "loc": ["query", "k"],
                        "msg": "field required",
                        "type": "value_error.missing",
                    }
                ]
            }
        )
E       AssertionError

tests/test_dependency_overrides.py:479: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_decorator_depends
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
____________ test_override_with_sub_router_decorator_depends_q_foo _____________

    def test_override_with_sub_router_decorator_depends_q_foo():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-decorator-depends/?q=foo")
>       assert response.status_code == 422
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:508: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_decorator_depends_q_foo
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
____________ test_override_with_sub_router_decorator_depends_k_bar _____________

    def test_override_with_sub_router_decorator_depends_k_bar():
        app.dependency_overrides[common_parameters] = overrider_dependency_with_sub
        response = client.get("/router-decorator-depends/?k=bar")
>       assert response.status_code == 200
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_dependency_overrides.py:538: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_overrides.test_override_with_sub_router_decorator_depends_k_bar
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
[DEBUG] entering pydantic.type_adapter._type_has_config
[DEBUG] exiting pydantic.type_adapter._type_has_config → bool
[DEBUG] entering pydantic.type_adapter._getattr_no_parents
______________________________ test_override_data ______________________________

    def test_override_data():
        app.dependency_overrides[get_data] = get_data_override
        response = client.get("/user")
>       assert response.json() == {
            "user": "john",
            "scopes": ["foo", "bar"],
            "data": [3, 4, 5],
        }
E       AssertionError

tests/test_dependency_security_overrides.py:49: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_security_overrides.test_override_data
____________________________ test_override_security ____________________________

    def test_override_security():
        app.dependency_overrides[get_user] = get_user_override
        response = client.get("/user")
>       assert response.json() == {
            "user": "alice",
            "scopes": ["foo", "bar"],
            "data": [1, 2, 3],
        }
E       AssertionError

tests/test_dependency_security_overrides.py:60: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_dependency_security_overrides.test_override_security
___________________ test_traceback_for_dependency_with_yield ___________________

    def test_traceback_for_dependency_with_yield():
        client = TestClient(app, raise_server_exceptions=True)
        with pytest.raises(ValueError) as exc_info:
            client.get("/dependency-with-yield")
        last_frame = exc_info.traceback[-1]
        assert str(last_frame.path) == __file__
>       assert last_frame.lineno == raise_value_error.__code__.co_firstlineno
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError

tests/test_exception_handlers.py:88: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_exception_handlers.test_traceback_for_dependency_with_yield
[DEBUG] entering tests.test_exception_handlers.raise_value_error
______________________ test_exception_handler_body_access ______________________

    def test_exception_handler_body_access():
        response = client.post("/", json={"numbers": [1, 2, 3]})
>       assert response.json() == IsDict(
            {
                "detail": {
                    "errors": [
                        {
                            "type": "list_type",
                            "loc": ["body"],
                            "msg": "Input should be a valid list",
                            "input": {"numbers": [1, 2, 3]},
                        }
                    ],
                    "body": '{"numbers": [1, 2, 3]}',
                }
            }
        ) | IsDict(
            # TODO: remove when deprecating Pydantic v1
            {
                "detail": {
                    "body": '{"numbers": [1, 2, 3]}',
                    "errors": [
                        {
                            "loc": ["body"],
                            "msg": "value is not a valid list",
                            "type": "type_error.list",
                        }
                    ],
                }
            }
        )
E       AssertionError

tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py:16: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_tutorial.test_custom_request_and_route.test_tutorial002.test_exception_handler_body_access
[DEBUG] entering json.loads
[DEBUG] entering json.detect_encoding
[DEBUG] exiting json.detect_encoding → str
[DEBUG] exiting json.loads → dict
[DEBUG] entering json.dumps
[DEBUG] exiting json.dumps → str
[DEBUG] entering json.loads
[DEBUG] entering json.detect_encoding
[DEBUG] exiting json.detect_encoding → str
[DEBUG] exiting json.loads → dict
_____________________ test_router_ws_depends_with_override _____________________

    def test_router_ws_depends_with_override():
        client = TestClient(app)
        app.dependency_overrides[ws_dependency] = lambda: "Override"  # noqa: E731
        with client.websocket_connect("/router-ws-depends/") as websocket:
>           assert websocket.receive_text() == "Override"
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AssertionError

tests/test_ws_router.py:163: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] entering tests.test_ws_router.test_router_ws_depends_with_override
=========================== short test summary info ============================
FAILED tests/test_dependency_overrides.py::test_override_simple[/main-depends/-200-expected0] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/main-depends/?q=foo-200-expected1] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/main-depends/?q=foo&skip=100&limit=200-200-expected2] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/decorator-depends/-200-expected3] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/router-depends/-200-expected4] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/router-depends/?q=foo-200-expected5] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/router-depends/?q=foo&skip=100&limit=200-200-expected6] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_simple[/router-decorator-depends/-200-expected7] - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_main_depends - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub__main_depends_q_foo - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_main_depends_k_bar - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_decorator_depends - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_decorator_depends_q_foo - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_decorator_depends_k_bar - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_depends - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_depends_q_foo - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_depends_k_bar - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_decorator_depends - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_decorator_depends_q_foo - AssertionError
FAILED tests/test_dependency_overrides.py::test_override_with_sub_router_decorator_depends_k_bar - AssertionError
FAILED tests/test_dependency_security_overrides.py::test_override_data - AssertionError
FAILED tests/test_dependency_security_overrides.py::test_override_security - AssertionError
FAILED tests/test_exception_handlers.py::test_traceback_for_dependency_with_yield - AssertionError
FAILED tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py::test_exception_handler_body_access - AssertionError
FAILED tests/test_ws_router.py::test_router_ws_depends_with_override - AssertionError